# Copier configuration settings
_subdirectory: template
_min_copier_version: "9.1.0"
_message_after_copy: | 
    Your package "{{ name }}" has been created successfully!
    
    Next steps:
    
    1. (Optional) Ensure that git is initialized in the project root, if not:

       $ git init

    2. Generate a poetry.lock file:

       $ make lock

    3. Read README.md and start coding.

#######################################################################################################################
# 1. Questions for the package maintainers
#######################################################################################################################
name:
    type: str
    help: What is the package name?
    validator: >-
        {% if not name %}
        Name is required.
        {% elif not (name|regex_search('^[a-zA-Z](?:[a-zA-Z0-9]| (?![ ]))*$')) %}
        Only alphanumeric characters and single spaces are allowed.
        {% endif %}

description:
    type: str
    help: What does the package do?
    placeholder: "A Python package that ..."

package_type:
    type: str
    help: What package type do you want to create?
    choices:
        Python Package: package
        FastAPI App: fastapi
        Gradio App: gradio
    default: package

use_pydantic:
    type: bool
    help: Do you want to use Pydantic (y/N)?
    default: "{% if package_type == 'fastapi' %}yes{% else %}no{% endif %}"
    when: "{{ package_type != 'fastapi' }}"

use_makefile:
    type: bool
    help: Do you want to use a Makefile with convenient shortcuts (y/N)?
    default: no

#######################################################################################################################
# 1.2 Setup CI/CD
#######################################################################################################################
ci:
    type: str
    help: What Continuous Integration service do you want to use?
    choices:
        GitHub CI: github
        GitLab CI: gitlab
        No CI: none
    default: github

repository_url:
    type: str
    help: What is the URL of this repository?
    default: "{% if ci == 'github' %}https://github.com/<username>/<repo>/{% else %}https://gitlab.com/<username>/repo/{% endif %}"
    validator: >-
        {% if ci == 'github' and not (repository_url|trim|regex_search('^https://github\\.com/[a-zA-Z0-9_-]+/[a-zA-Z0-9_-]+/$')) %}
        Invalid GitHub URL, example: https://github.com/lukin0110/poetry-copier-fastapi-demo/
        {% elif ci == 'gitlab' and not (repository_url | regex_search('^https://gitlab\\.com/[a-zA-Z0-9/_-]+/$')) %}
        Invalid GitHub URL, example: https://gitlab.com/lukin0110/poetry-copier-fastapi-gitlab-demo/
        {% elif not repository_url %}
        Repository URL is required.
        {% endif %}

use_private_package_repository:
    type: bool
    help: Do you want to use a private package repository (to download proprietary packages) (y/N)?
    default: no
    # NOTE: only available for GitLab CI for the moment
    when: "{{ ci == 'gitlab' }}"

# 1.2.1 Setup GitHub CI/CD
# TODO: setup private package support (https://github.com/lukin0110/poetry-copier/issues/17)

# 1.2.2 Setup GitLab CI/CD
gitlab_private_package_repository_name:
    type: str
    help: What is the name of the private GitLab package repository?
    default: "private_pypi"
    validator: "{% if not (gitlab_private_package_repository_name|regex_search('^[a-zA-Z_]+$')) %}Invalid repository name{% endif %}"
    when: "{{ ci == 'gitlab' and use_private_package_repository }}"

gitlab_private_package_repository_url:
    type: str
    help: What is the URL of the private gitlab package repository?
    placeholder: "https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/packages/pypi/simple"
    validator: "{% if not (gitlab_private_package_repository_url|regex_search('https://gitlab.com/api/v4/projects/[0-9]+/packages/pypi')) %}Invalid GitLab URL{% endif %}"
    when: "{{ ci == 'gitlab' and use_private_package_repository }}"

gitlab_private_publish_repository_url:
    type: str
    help: What is the URL of the private gitlab package registry to publish this package to?
    placeholder: "https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/packages/pypi"
    validator: "{% if not (gitlab_private_publish_repository_url|regex_search('https://gitlab.com/api/v4/projects/.+/packages/pypi')) %}Invalid GitLab URL to publish{% endif %}"
    when: "{{ ci == 'gitlab' and package_type == 'package' }}"

# 1.2.3 Setup No CI
# TODO: configure private package repository (to download proprietary packages)

#######################################################################################################################
# 2. Computed or fixed values
# Compute, don't prompt. https://github.com/copier-org/copier/issues/716#issuecomment-1263307193
#######################################################################################################################
python_version:
    type: str
    help: What Python version do you want to use?
    default: "3.11.6"
    when: false

# The validator of the `name` field ensures that the name only contains alphanumeric characters and single spaces.
package_slug:
    type: str
    help: A slug of the package name?
    default: "{{ name|lower|trim|replace(' ', '_') }}"
    when: false

use_app:
    type: bool
    help: Do you want to use the app (y/N)?
    default: "{% if package_type != 'package' %}yes{% else %}no{% endif %}"
    when: false

use_fastapi:
    type: bool
    help: Do you want to use FastAPI (y/N)?
    default: "{% if package_type == 'fastapi' %}yes{% else %}no{% endif %}"
    when: false

use_gradio:
    type: bool
    help: Do you want to use Gradio (y/N)?
    default: "{% if package_type == 'gradio' %}yes{% else %}no{% endif %}"
    when: false

use_push_ecr:
    type: bool
    help: Do you want to push the Docker image to ECR (y/N)?
    default: no
    when: false
