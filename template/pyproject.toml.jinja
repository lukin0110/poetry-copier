[tool.poetry]  # https://python-poetry.org/docs/pyproject/
name = "{{ package_slug }}"
version = "0.0.0"
description = "{{ description }}"
authors = []
license = "Proprietary"
readme = "README.md"
{% if repository_url %}repository = "{{ repository_url }}"{% endif %}

[build-system]  # https://python-poetry.org/docs/pyproject/#poetry-and-pep-517
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.dependencies]  # https://python-poetry.org/docs/dependency-specification/
python = ">={{ python_version }},<4.0"
poethepoet = ">=0.24.2"
{% if use_fastapi %}fastapi = { extras = ["all"], version = ">=0.104.1" }
uvicorn = { extras = ["standard"], version = ">=0.24.0" }{% endif %}
{% if use_pydantic %}pydantic = ">=2.4.2"{% endif %}

[tool.poetry.group.dev.dependencies]  # https://python-poetry.org/docs/master/managing-dependencies/
coverage = { extras = ["toml"], version = ">=7.3.2" }
ipython = ">=8.18.1"
mypy = "1.7.1"
pre-commit = ">=3.5.0"
pytest = ">=7.4.3"
pytest-clarity = ">=1.0.1"
pytest-mock = ">=3.12.0"
pytest-xdist = ">=3.5.0"
ruff = ">=0.1.6"
safety = ">=2.3.5,!=2.3.5"
shellcheck-py = ">=0.9.0"
typeguard = ">=4.1.5"

[[tool.poetry.source]]  # https://python-poetry.org/docs/repositories/
name = "pypi"
priority = "primary"

{% if use_private_package_repository %}[[tool.poetry.source]]  # https://python-poetry.org/docs/repositories/#private-repository-example
# Configura a private package: my_private_package = { version = ">=0.0.0", source="{{ gitlab_private_package_repository_name }}" }
name = "{{ gitlab_private_package_repository_name }}"
url = "{{ gitlab_private_package_repository_url }}"
priority = "explicit"{% endif %}

[tool.coverage.report]  # https://coverage.readthedocs.io/en/latest/config.html#report
# TODO: please raise the bar :)
fail_under = 0
precision = 1
show_missing = true
skip_covered = true

[tool.coverage.run]  # https://coverage.readthedocs.io/en/latest/config.html#run
branch = true
command_line = "--module pytest"
data_file = "reports/.coverage"
source = ["src"]

[tool.coverage.xml]  # https://coverage.readthedocs.io/en/latest/config.html#xml
output = "reports/coverage.xml"

[tool.mypy]  # https://mypy.readthedocs.io/en/latest/config_file.html
junit_xml = "reports/mypy.xml"
{% if use_pydantic %}plugins = "pydantic.mypy"{% endif %}
strict = true
disallow_subclassing_any = false
disallow_untyped_decorators = false
ignore_missing_imports = true
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
warn_unreachable = true
mypy_path = "src"

{% if use_pydantic %}[tool.pydantic-mypy]  # https://pydantic-docs.helpmanual.io/mypy_plugin/#configuring-the-plugin
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true{% endif %}

[tool.pytest.ini_options]  # https://docs.pytest.org/en/latest/reference/reference.html#ini-options-ref
addopts = "--color=yes --doctest-modules --exitfirst --failed-first --strict-config --strict-markers --typeguard-packages={{ package_slug }} --verbosity=2 --junitxml=reports/pytest.xml"
filterwarnings = ["error", "ignore::DeprecationWarning"]
testpaths = ["src", "tests"]
xfail_strict = true
log_file_level = "info"
pythonpath = "src"

[tool.ruff]  # https://github.com/charliermarsh/ruff
fix = true
ignore-init-module-imports = true
line-length = 120
select = ["A", "ASYNC", "B", "BLE", "C4", "C90", "D", "DTZ", "E", "EM", "ERA", "F", "FBT", "FLY", "FURB", "G", "I", "ICN", "INP", "INT", "ISC", "LOG", "N", "NPY", "PERF", "PGH", "PIE", "PLC", "PLE", "PLR", "PLW", "PT", "PTH", "PYI", "RET", "RSE", "RUF", "S", "SIM", "SLF", "SLOT", "T10", "T20", "TCH", "TID", "TRY", "UP", "W", "YTT"]
extend-safe-fixes = ["TID252"]  # https://docs.astral.sh/ruff/settings/#extend-safe-fixes
ignore = ["E501", "EM102", "ISC001", "RET504", "S101", "TRY003", "W505"]
unfixable = ["ERA001", "F401", "F841", "T201", "T203"]  # https://docs.astral.sh/ruff/settings/#unfixable
src = ["src", "tests"]
target-version = "py311"
force-exclude = true  # https://docs.astral.sh/ruff/settings/#force-exclude
preview = true  # https://docs.astral.sh/ruff/preview/

[tool.ruff.extend-per-file-ignores] # https://docs.astral.sh/ruff/settings/#extend-per-file-ignores
# Ignore missing __init__.py files in tests.
"tests/*" = ["INP001"]

[tool.ruff.flake8-tidy-imports]
# Disallow all relative imports.
ban-relative-imports = "all"

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.pep8-naming]
# Allow Pydantic's `@validator` decorator to trigger class method treatment.
classmethod-decorators = ["classmethod", "pydantic.validator", "pydantic.root_validator"]

[tool.ruff.pycodestyle]
max-doc-length = 100

[tool.ruff.pydocstyle]
convention = "numpy"

[tool.poe.tasks] # https://poethepoet.natn.io/index.html
    [tool.poe.tasks.lint]
    help = "Lint this package"

    [[tool.poe.tasks.lint.sequence]]
    cmd = """
      pre-commit run
        --all-files
        --color always
      """

    [[tool.poe.tasks.lint.sequence]]
    shell = "safety check --continue-on-error --full-report"


    [tool.poe.tasks.test]
    help = "Test this package"

    [[tool.poe.tasks.test.sequence]]
    cmd = "coverage run"

    [[tool.poe.tasks.test.sequence]]
    cmd = "coverage report"

    [[tool.poe.tasks.test.sequence]]
    cmd = "coverage xml"

{% if use_fastapi %}
    [tool.poe.tasks.dev]  # https://www.uvicorn.org/settings/
    help = "Serve a REST API in development"
    cmd = """
    uvicorn
      --host 0.0.0.0
      --port $port
      --use-colors
      --reload
      --factory
      {{ package_slug }}.app:create_app
    """

    [[tool.poe.tasks.dev.args]]
    help = "Bind socket to this port (default: 8000)"
    name = "port"
    options = ["--port"]
    default = "8000"


    [tool.poe.tasks.serve]  # https://www.uvicorn.org/settings/
    help = "Serve a REST API in production"
    cmd = """
    uvicorn
      --host 0.0.0.0
      --port $port
      --use-colors
      --no-access-log
      --proxy-headers
      --timeout-graceful-shutdown 10
      --timeout-keep-alive 10
      --factory
      {{ package_slug }}.app:create_app
    """
    use_exec = true

    [[tool.poe.tasks.serve.args]]
    help = "Bind socket to this port (default: 8000)"
    name = "port"
    options = ["--port"]
    default = "8000"
{% endif %}
