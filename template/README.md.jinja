{% if ci == 'github' %}[![Lint and Test]({{ repository_url }}actions/workflows/test.yml/badge.svg)]({{ repository_url }}actions)
{% endif %}
# {{ name }}

{{ description }}.

## üöÄ Using

<details>
<summary>Prerequisites</summary>

<details>
<summary>1. Install Docker</summary>

1. Go to [Docker](https://www.docker.com/get-started), download and install docker.
2. [Configure Docker to use the BuildKit build system](https://docs.docker.com/build/buildkit/#getting-started). On macOS and Windows, BuildKit is enabled by default in Docker Desktop.

</details>

{% if use_private_package_repository %}<details>
<summary>2. Configure Poetry to use the private package repository</summary>

[Create a personal access token](https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html#create-a-personal-access-token) with the `api` scope and use it to [add your private package repository credentials to your Poetry's `auth.toml` file](https://python-poetry.org/docs/repositories/#configuring-credentials):

```toml
# Locations of the auth.toml file:
# macOS:   ~/Library/Application Support/pypoetry/auth.toml
# Linux:   ~/.config/pypoetry/auth.toml
[http-basic.{{ gitlab_private_package_repository_name }}]
username = "{personal access token name}"
password = "{personal access token}"
```
</details>

<details>
<summary>3. Link Poetry & Docker Compose</summary>

Export the location of your private package repository credentials so that Docker Compose can load these as a [build and run time secret](https://docs.docker.com/compose/compose-file/compose-file-v3/#secrets-configuration-reference):

```sh
# Locations of the auth.toml file:
# macOS:   ~/Library/Application Support/pypoetry/auth.toml
# Linux:   ~/.config/pypoetry/auth.toml
cat << EOF >> ~/.bashrc
export POETRY_AUTH_TOML_PATH="~/.config/pypoetry/auth.toml"
EOF
```
</details>{% endif %}
</details>

{% if use_fastapi %}To serve this FastAPI app, run:
```bash
# Inside a DevContainer (when using VSCode)
poe serve --dev
```
```bash
# or, outside a DevContainer (when using PyCharm)
docker compose up app
```
and open [localhost:8000](https://localhost:8000) in your browser, [Swagger API docs](https://swagger.io/) available on [localhost:8000/docs](https://localhost:8000/docs).
{% elif use_gradio %}To serve this Gradio app, run:
```bash
# Inside a DevContainer (when using VSCode)
poe serve --dev
```
```bash
# or, outside a DevContainer (when using PyCharm)
docker compose up app
```
and open [localhost:8000](https://localhost:8000) in your browser.
{% else %}To install this package, run:
```bash
pip install {{ package_slug }}
```
{% endif %}

## ‚ú® Setup VSCode

Open this repo with VSCode, *build DevContainer* and *Dev Containers: Reopen in Container*.

## ‚ú® Setup PyCharm

Open this repo with PyCharm, and [configure Docker Compose as a remote interpreter](https://www.jetbrains.com/help/pycharm/using-docker-compose-as-a-remote-interpreter.html#docker-compose-remote) with the `dev` service.

## üßë‚Äçüíª Contributing

The following commands can be used inside a DevContainer.

#### Run linters
```bash
poe lint
```

#### Run tests
```bash
poe test
```

#### Update poetry lock file
```bash
poetry lock --no-update
```

<details>
<summary>Outside a DevContainer</summary>

1. Run linters
```bash
docker compose run devcontainer poe lint
```
2. Run tests
```bash
docker compose run devcontainer poe test
```
3. Update poetry lock file
```bash
docker compose run devcontainer poetry lock --no-update
# Update the docker image with the new lock file
docker compose build
```
4. Open a shell in docker
```bash
docker compose run devcontainer
```
</details>
{% if use_makefile %}<details>
<summary>Shortcuts outside a DevContainer</summary>

1. `make lint`
2. `make test`
3. `make lock`
4. `make shell`
</details>{% endif %}

---
Ô∏è‚ö°Ô∏è Scaffolded with [Poetry Copier](https://github.com/lukin0110/poetry-copier/)\
üõ†Ô∏è [Open an issue](https://github.com/lukin0110/poetry-copier/issues/new) if you have any questions or suggestions.
