# https://docs.gitlab.com/ee/ci/
include:
  - template: Jobs/Secret-Detection.gitlab-ci.yml
  - template: Security/Dependency-Scanning.gitlab-ci.yml

stages:
  - Build
  - Lint and Test
  - Security
  - {% if use_fastapi %}Build App{% else %}Publish{% endif %}

# Compute CI image hash.
.compute_ci_hash:
  before_script:
    - export DOCKER_IMAGE_SHA="$(sha1sum Dockerfile poetry.lock pyproject.toml | sha1sum | cut -c 1-12)"
    - echo "CI_IMAGE_SHA=$DOCKER_IMAGE_SHA" >> .env
    - echo -e "\e[95mCI image hash computed = $DOCKER_IMAGE_SHA\e[0m"
  artifacts:
    reports:
      dotenv: .env

# Base Docker build script.
.docker:
  image: docker:24.0.7
  services:
    - docker:24.0.7-dind
  variables:
    DOCKER_REGISTRY: $CI_REGISTRY
    DOCKER_REGISTRY_USER: $CI_REGISTRY_USER
    DOCKER_REGISTRY_PASSWORD: $CI_REGISTRY_PASSWORD
  script:
    - |
      echo -e "\e[95mImage hash to build = $DOCKER_IMAGE_SHA, target = $DOCKER_TARGET\e[0m"
      echo -n "$DOCKER_REGISTRY_PASSWORD" | docker login --username "$DOCKER_REGISTRY_USER" --password-stdin "$DOCKER_REGISTRY"
      DOCKER_PUSH=${DOCKER_PUSH:-$(timeout 2s docker pull "$DOCKER_IMAGE":"$DOCKER_IMAGE_SHA" >/dev/null 2>&1 && echo $? || echo $?)}
      if [ "$DOCKER_PUSH" -ne 1 ]; then
        echo -e "\e[95m$DOCKER_IMAGE:$DOCKER_IMAGE_SHA exists, skipping this job...\e[0m"
      else
        echo "Build $DOCKER_IMAGE:$DOCKER_IMAGE_SHA"
        echo "[http-basic.{{ gitlab_private_package_repository_name }}]" >> auth.toml
        echo "username = \"gitlab-ci-token\"" >> auth.toml
        echo "password = \"$CI_JOB_TOKEN\"" >> auth.toml
        docker pull $CI_REGISTRY_IMAGE/ci:$CI_IMAGE_SHA || true
        DOCKER_BUILDKIT=1 docker build \
          --build-arg BUILDKIT_INLINE_CACHE=1 \
          --cache-from "$CI_REGISTRY_IMAGE/ci:$CI_IMAGE_SHA" \
          --secret id=poetry-auth,src=auth.toml \
          --tag $DOCKER_IMAGE:$DOCKER_IMAGE_SHA \
          --target $DOCKER_TARGET \
          .
        # Push image to registry.
        docker push $DOCKER_IMAGE:$DOCKER_IMAGE_SHA
      fi

# Build CI Docker image.
Build CI image:
  stage: Build
  extends:
    - .compute_ci_hash
    - .docker
  variables:
    DOCKER_IMAGE: $CI_REGISTRY_IMAGE/ci
    DOCKER_IMAGE_SHA: $CI_IMAGE_SHA
    DOCKER_TARGET: dev

Lint:
  stage: Lint and Test
  image: $CI_REGISTRY_IMAGE/ci:$CI_IMAGE_SHA
  cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
      - .mypy_cache/
      - .ruff_cache/
  script:
    - poe lint
  artifacts:
    reports:
      junit:
        - reports/mypy.xml
    untracked: true
    when: always

Test:
  stage: Lint and Test
  image: $CI_REGISTRY_IMAGE/ci:$CI_IMAGE_SHA
  cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
      - .mypy_cache/
      - .ruff_cache/
      - .pytest_cache/
  script:
    - poe test
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: reports/coverage.xml
      junit:
        - reports/pytest.xml
    untracked: true
    when: always

dependency_scanning:
  stage: Lint and Test

# Secret detection
# https://docs.gitlab.com/ee/user/application_security/secret_detection/
# Only run in branch pipelines when associated with open merge requests.
secret_detection:
  stage: Security
  needs: ["Build CI image"]
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $CI_OPEN_MERGE_REQUESTS
      when: always

# Dependency scanning
# https://docs.gitlab.com/ee/user/application_security/dependency_scanning/
# Only run in branch pipelines when associated with open merge requests.
gemnasium-python-dependency_scanning:
  stage: Security
  needs: ["Build CI image"]
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $CI_OPEN_MERGE_REQUESTS
      when: always

{% if use_fastapi %}Deploy:
  stage: Build App
  extends:
    - .docker
  before_script:
    # Export DOCKER_IMAGE_SHA since we can't use ternary assignments in Gitlab CI variables
    - export DOCKER_IMAGE_SHA=${CI_COMMIT_TAG:-$CI_COMMIT_SHORT_SHA}
    - echo -e "\e[95mApp Image hash = $DOCKER_IMAGE_SHA\e[0m"
  variables:
    DOCKER_IMAGE: $CI_REGISTRY_IMAGE
    DOCKER_TARGET: app
  needs: ["Test"]
  when: manual
{% else %}
Publish:
  stage: Publish
  image: $CI_REGISTRY_IMAGE/ci:$CI_IMAGE_SHA
  script:
    - rm /root/.config/pypoetry/auth.toml
    - poetry config repositories.private {{ gitlab_private_publish_repository_url }}
    - poetry config http-basic.private "gitlab-ci-token" "$CI_JOB_TOKEN"
    - poetry publish --build --repository private
  needs: ["Test"]
  when: manual
#  only:
#    - tags
{% endif %}
